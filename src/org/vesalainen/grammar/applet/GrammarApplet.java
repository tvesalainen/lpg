/*
 * Copyright (C) 2012 Timo Vesalainen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GrammarApplet.java
 *
 * Created on 20.11.2011, 15:57:08
 */
package org.vesalainen.grammar.applet;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import javax.jnlp.ClipboardService;
import javax.jnlp.ServiceManager;
import javax.jnlp.UnavailableServiceException;
import org.vesalainen.grammar.BnfGrammar;
import org.vesalainen.lpg.LALRKParserGenerator;
import org.vesalainen.grammar.Grammar;

/**
 *
 * @author tkv
 */
public class GrammarApplet extends javax.swing.JApplet
{

    private String backup;
    private BnfGrammar bnf;
    private Grammar g;
    private LALRKParserGenerator lrk;

    /** Initializes the applet GrammarApplet */
    public void init()
    {
        try
        {
            java.awt.EventQueue.invokeAndWait(new Runnable()
            {

                public void run()
                {
                    initComponents();
                }
            });
            level.setValue(new Integer(5));
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        compile = new javax.swing.JButton();
        states = new javax.swing.JButton();
        firstMap = new javax.swing.JButton();
        closure = new javax.swing.JButton();
        nullable = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        actionBar = new javax.swing.JTextField();
        laStates = new javax.swing.JButton();
        back = new javax.swing.JButton();
        level = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        compile.setText("Compile");
        compile.setToolTipText("Create parser tables");
        compile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileActionPerformed(evt);
            }
        });

        states.setText("States");
        states.setToolTipText("Show LALR states");
        states.setEnabled(false);
        states.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statesActionPerformed(evt);
            }
        });

        firstMap.setText("First map");
        firstMap.setToolTipText("Show first map for nonterminals");
        firstMap.setEnabled(false);
        firstMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstMapActionPerformed(evt);
            }
        });

        closure.setText("Closure");
        closure.setToolTipText("Show closure for nonterminals");
        closure.setEnabled(false);
        closure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closureActionPerformed(evt);
            }
        });

        nullable.setText("Nullable NT's");
        nullable.setToolTipText("Show nullable nonterminals");
        nullable.setEnabled(false);
        nullable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nullableActionPerformed(evt);
            }
        });

        text.setColumns(20);
        text.setRows(5);
        text.setToolTipText("<html>\nWrite you grammar in BNF form. Example:\n<pre>\nE ::= E '*' B\nE ::= E '+' B\nE ::=  B\nB ::= '0'\nB ::= '1'\n</pre>\nTerminals are apostrophed strings.");
        jScrollPane1.setViewportView(text);

        laStates.setText("La States");
        laStates.setToolTipText("Show lookahead states");
        laStates.setEnabled(false);
        laStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laStatesActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.setToolTipText("Back to grammar editor");
        back.setEnabled(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        level.setToolTipText("Maximum lookahead level");

        jLabel1.setText("Max LALRK level");

        jButton1.setText("Copy clipboard");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actionBar, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(states, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(nullable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(closure, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(firstMap, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(compile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(laStates, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(back, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(compile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(firstMap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closure)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nullable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(states)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(laStates)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(back)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(level, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(actionBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void compileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_compileActionPerformed
    {//GEN-HEADEREND:event_compileActionPerformed
        try
        {
            bnf = BnfGrammar.newInstance();
            backup = text.getText();
            Grammar sg = new Grammar();
            backup = backup.trim()+'\n';
            bnf.parseBnf(backup, sg);
            /*
            g = sg.getGrammar();
            Integer l = (Integer) level.getValue();
            lrk = new LALRKParserGenerator(g, l);
             * 
             */
            int lv = lrk.getLrkLevel();
            if (lv == 0)
            {
                actionBar.setText("This grammar is LR(0)");
            }
            else
            {
                actionBar.setText("This grammar is LALR(" + lv + ")");
            }
            compile.setEnabled(true);
            closure.setEnabled(true);
            firstMap.setEnabled(true);
            nullable.setEnabled(true);
            states.setEnabled(true);
            back.setEnabled(true);
            if (lrk.isLrk())
            {
                laStates.setEnabled(true);
            }
            else
            {
                laStates.setEnabled(false);
            }
        }
        catch (Exception ex)
        {
            actionBar.setText(ex.getMessage());
            closure.setEnabled(false);
            firstMap.setEnabled(false);
            nullable.setEnabled(false);
            states.setEnabled(false);
            laStates.setEnabled(false);
            back.setEnabled(false);
        }
    }//GEN-LAST:event_compileActionPerformed

    private void laStatesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_laStatesActionPerformed
    {//GEN-HEADEREND:event_laStatesActionPerformed
        try
        {
            StringBuilder sb = new StringBuilder();
            lrk.printLaStates(sb);
            text.setText(sb.toString());
            compile.setEnabled(false);
        }
        catch (IOException ex)
        {
            actionBar.setText(ex.getMessage());
        }

    }//GEN-LAST:event_laStatesActionPerformed

    private void firstMapActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_firstMapActionPerformed
    {//GEN-HEADEREND:event_firstMapActionPerformed
        try
        {
            StringBuilder sb = new StringBuilder();
            lrk.printFirstMapForNonterminals(sb);
            text.setText(sb.toString());
            compile.setEnabled(false);
        }
        catch (IOException ex)
        {
            actionBar.setText(ex.getMessage());
        }
    }//GEN-LAST:event_firstMapActionPerformed

    private void closureActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closureActionPerformed
    {//GEN-HEADEREND:event_closureActionPerformed

        try
        {
            StringBuilder sb = new StringBuilder();
            lrk.printClosureForNonterminals(sb);
            text.setText(sb.toString());
            compile.setEnabled(false);
        }
        catch (IOException ex)
        {
            actionBar.setText(ex.getMessage());
        }

    }//GEN-LAST:event_closureActionPerformed

    private void nullableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nullableActionPerformed
    {//GEN-HEADEREND:event_nullableActionPerformed

        try
        {
            StringBuilder sb = new StringBuilder();
            lrk.printNullableNonterminals(sb);
            text.setText(sb.toString());
            compile.setEnabled(false);
        }
        catch (IOException ex)
        {
            actionBar.setText(ex.getMessage());
        }

    }//GEN-LAST:event_nullableActionPerformed

    private void statesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_statesActionPerformed
    {//GEN-HEADEREND:event_statesActionPerformed

        /*
        try
        {
            StringBuilder sb = new StringBuilder();
            lrk.printStates(sb);
            text.setText(sb.toString());
            compile.setEnabled(false);
        }
        catch (IOException ex)
        {
            actionBar.setText(ex.getMessage());
        }
        * 
        */

    }//GEN-LAST:event_statesActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backActionPerformed
    {//GEN-HEADEREND:event_backActionPerformed

        text.setText(backup);
        compile.setEnabled(true);
        closure.setEnabled(false);
        firstMap.setEnabled(false);
        nullable.setEnabled(false);
        states.setEnabled(false);
        laStates.setEnabled(false);
        back.setEnabled(false);


    }//GEN-LAST:event_backActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try
        {
            ClipboardService cs = (ClipboardService) ServiceManager.lookup("javax.jnlp.ClipboardService");
            Transferable contents = cs.getContents();
            String str = (String) contents.getTransferData(DataFlavor.stringFlavor);
            text.setText(str);
        }

        catch (UnavailableServiceException | UnsupportedFlavorException | IOException ex)
        {
            actionBar.setText(ex.getMessage());
        }        
    
}//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField actionBar;
    private javax.swing.JButton back;
    private javax.swing.JButton closure;
    private javax.swing.JButton compile;
    private javax.swing.JButton firstMap;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton laStates;
    private javax.swing.JSpinner level;
    private javax.swing.JButton nullable;
    private javax.swing.JButton states;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
}
