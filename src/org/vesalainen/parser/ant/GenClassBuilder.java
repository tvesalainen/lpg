/*
 * Copyright (C) 2012 Timo Vesalainen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.vesalainen.parser.ant;

// IMPORTANT! You need to compile this class against ant.jar.
// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.
// For example, for a plain Java project with no other dependencies, set in project.properties:
// javac.classpath=${ant.core.lib}
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.types.FileSet;
import org.vesalainen.parser.GenClassCompiler;
import org.vesalainen.parser.annotation.GenClassname;
import org.vesalainen.parser.util.CompileFiler;

/**
 * ParserBuilder creates a parser class from given grammar.
 *
 * @author tkv
 * @deprecated Replaced by org.vesalainen.parser.annotation.Processor
 */
public class GenClassBuilder extends Task
{
    private File sourceDir;
    private File classesDir;
    private String language;
    private String region;
    private String script;
    private String variant;
    private List<FileSet> filesets = new ArrayList<>();

    public void setLanguage(String language)
    {
        this.language = language;
    }

    public void setRegion(String region)
    {
        this.region = region;
    }

    public void setScript(String script)
    {
        this.script = script;
    }

    public void setVariant(String variant)
    {
        this.variant = variant;
    }

    public void setDestdir(File destdir)
    {
        this.classesDir = destdir;
        log(destdir.getPath());
        log("using " + destdir.getPath() + " for generated byte code");
    }

    public void setSrcdir(File srcdir)
    {
        this.sourceDir = srcdir;
        log("using " + srcdir.getPath() + " for generated source");
    }

    public void addFileset(FileSet fileSet)
    {
        filesets.add(fileSet);
    }

    public @Override
    void execute() throws BuildException
    {
        Locale defaultLocale = Locale.getDefault();
        try
        {
            if (language != null)
            {
                Locale.Builder builder = new Locale.Builder();
                builder.setLanguage(language);
                builder.setRegion(region);
                builder.setScript(script);
                builder.setVariant(variant);
                Locale.setDefault(builder.build());
            }
            for (FileSet fileSet : filesets)
            {
                DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(getProject());
                String[] includedFiles = directoryScanner.getIncludedFiles();
                for (String classfile : includedFiles)
                {
                    if (classfile.indexOf('$') == -1)   // only outer classes processed
                    {
                        String classname = classfile.replace(".class", "").replace(File.separatorChar, '.');
                        Class<?> clazz = Class.forName(classname);
                        if (clazz.isAnnotationPresent(GenClassname.class))
                        {
                            compile(clazz);
                        }
                    }
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            log(ex.getMessage(), ex, Project.MSG_ERR);
        }
        finally
        {
            Locale.setDefault(defaultLocale);
        }
    }

    private void compile(Class<?> parser)
    {
        /*
        GenClassname genClassname = parser.getAnnotation(GenClassname.class);
        if (genClassname == null)
        {
            throw new BuildException("@GenClassname not set in " + parser, getLocation());
        }
        String classname = genClassname.value();
        if (!needsCompiling(parser, classname))
        {
            log(classname + " is uptodate");
            return;
        }
        try
        {
            log("compiling " + parser);
            CompileFiler filer = new CompileFiler(classesDir, sourceDir);
            GenClassCompiler.compile(parser, filer);
        }
        catch (ReflectiveOperationException | IOException ex)
        {
            log(ex, Project.MSG_ERR);
            throw new BuildException(parser + " fails", ex, getLocation());
        }
        */
    }

    private boolean needsCompiling(Class<?> superClass, String dstClass)
    {
        String superClassname = superClass.getName().replace('.', '/') + ".class";
        String dstClassname = dstClass.replace('.', '/') + ".class";
        File superFile = new File(classesDir, superClassname);
        File dstFile = new File(classesDir, dstClassname);
        return !superFile.exists() || !dstFile.exists() || dstFile.lastModified() < superFile.lastModified();
    }
}
